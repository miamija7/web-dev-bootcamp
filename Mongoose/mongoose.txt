
======= MONGOOSE =======

 -----------------                        -----------------
|     Node.js     |<----> Mongoose <---->|     MongoDB     |
 -----------------                        -----------------

Mongoose:
- ODM
- Connects Node/JS to Mongo
- Connecting to mongodb from a node app!

Topics:
Mongoose Middleware

The Role of ORM/ODMs:
- Object Data/Document Mapper [No-SQL]
- Object Relation Mapper [SQL]
- more than a driver
- ODMs map documents coming in from a database into usable JavaScript objects
- models out our app data and defines a schema
- validate data
- build complex queries
- all from JS


Connecting Mongoose to Mongo:
% cd /Users/miaevans/IdeaProjects/web-dev-bootcamp/Mongoose/MongooseBasics
% npm init -y
% npm i mongoose
% touch index.js
% ls
  index.js		node_modules		package-lock.json	package.json
// work in index.js file


Defining a Model:
- JavaScript classes that represent data in a db
- models information coming back from our mongodb
- Defining a Model:
    1. Define a schema (name: singularSchema)
    2. Make a model with the schema (name: Singular)
    3. Collection is auto created (name: plural)
% node                                  % mongosh
> .load index.js                        > use movieApp
> nemo                                  > db.movies.find()
> nemo.save()                           > db.movies.find()
> nemo.score = 9.5                      >
> nemo.save()                           > db.movies.find()



Mongoose CRUD:
- Create [insert]:
    Movie.insertMany([
        { title: 'Amelie', year: 2001, score: 8.3, rating: 'R' },
        { title: 'Alien', year: 1979, score: 8.1, rating: 'R' },
        { title: 'The Iron Giant', year: 1999, score: 7.5, rating: 'PG' },
        { title: 'Stand By Me', year: 1986, score: 8.6, rating: 'R' },
        { title: 'Moonrise Kingdom', year: 2012, score: 7.3, rating: 'PG-13' }
    ]).then(data => {
            console.log("IT WORKED!")
            console.log(data);
    })
- Read [finding/queries]:
    % node
    > .load index.js
    > Movie.find({})                                        // returns query object (a "thenable" object)
    > Movie.find({}).then(data => console.log(data))        // returns data
    > Movie.find({year: {$lt: 1990}}).then(data => console.log(data))
    > Movie.findOne({ rating : {$gte: 9.5 }}).then(data => console.log(data));
    > Movie.find({_id: '637bacd54b5fcff4d35bd6a6'}).then(m => console.log(m));
    > Movie.findById('637bacd54b5fcff4d35bd6a6').then(m => console.log(m));
- Update [update]
    > Movie.updateOne({title: 'Finding Nemo'},{year:2022}).then(res => console.log(res));
    > Movie.updateMany({ title: { $in: ['Finding Nemo', 'Stand By Me']}},{ score: 10}).then(res => console.log(res));
    > Movie.findOneAndUpdate({title: 'The Iron Giant'}, {score: 7.8}, {new: true}).then(res => console.log(res));
- Delete [remove]
    > Movie.remove({title: 'Amelie'}).then(m => console.log(m));            // deprecated
    > Movie.deleteMany({year: {$gte: 1999}}).then(m => console.log(m));
    > Movie.findOneAndDelete({title: 'Alien'}).then(m => console.log(m));    // returns deleted movie

*** NOTE: Pure 'update' and 'delete' don't return an object, rather a message of confirmation ***


Schema Constraints:
- Checkout product.js
- Validation!
- Additional info not included in a schema, won't make it to the db
- In schemas, properties can be objects that define stricter validations like 'type'/'required'/'default'
- More validators: trim, maxLength, lowercase, and runValidators(see below):
    Product.findOneAndUpdate({name: 'Bike Helmet'}, {price: -10.99}, {new: true, runValidators: true})
        .then(data => console.log(data))
        .catch(e => console.log(e))
- input validation can have error messages
    price: {
        type: Number,
        required: true,
        min: [0, 'Price must be positive ya dodo!']
    }
- input validation can be a fixed value using enum for set fixed valid data
    size: {
        type: String,
        enum: ['S','M','L']
    }


Model Instance & Static Methods:
Instance Methods:
- instances of a model / this = individual product
- instance methods are available on every single instance
- class methods are only available on classes, like Product, or Movie
- adding functions to instance:
    schemaName.methods.function = function () { ... }
Static Methods:
- static method on a model / this = entire Model
- method on Model Class, not instances
- used for creating fancy find/update/removal methods
- adding functions to Model Classes:
    schemaName.statics.function () { ... }



Mongoose Virtuals:
- different from adding instance methods, it adds a property
- a property that does not exist in the database, but strictly in mongoose side in JS
- uses .get()
- you can define a set function in a virtual! using .set()
    personSchema.virtual('fullName').get(function () {
        return `${this.first} ${this.last}`;
    }).set(function (v) {
        this.first = v.substr(0, v.indexOf(' '));
        this.last = v.substr(v.indexOf(' ') + 1 );
    })

    mia.